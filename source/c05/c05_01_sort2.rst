图解九大经典排序算法（二）
=============================

希尔排序
--------

**时间复杂度**\ ：O(nlogn) ~ O(n^2)

**空间复杂度**\ ：O(1)

**排序思想**\ ：
希尔排序，有时也叫做“最小增量排序”，该算法是冲破 O(n^2)的第一批算法之一。通过把原始的序列以增量(网上通常叫做gap，意为间隔，在下面代码中我把它体现为分组数，group\_num。)进行分组，分解成几个子序列来提高效率，其中每个小序列使用的都是插入排序，使得该组有序。

**原理图解**\ ：

|image0| |希尔排序|

**代码实现**\ ：

.. code:: python

    def shell_sort(array):
        length = len(array)
        # 长度的一半，>> 是位运算，相当于是"length//2"
        group_num = length >> 1
        while group_num > 0:
            for i in range(group_num, length):
                current_index_value = array[i]
                # k的作用：用于当前索引往前移动n个group_num的索引
                k = i
                # while循环把同一组的最小值移到最前
                while k >= group_num and array[k-group_num] > current_index_value:
                    array[k] = array[k-group_num]
                    # 索引往前移动
                    k -= group_num
                array[k] = current_index_value

            group_num >>= 1
        return array

堆排序
------

**时间复杂度**\ ：O(nlog_n)

**空间复杂度**\ ：O(1)

要掌握堆排序，有一些预备知识，你需要了解，你必须得知道，什么是堆（二叉堆），什么是最大堆，什么是最小堆？

我在网上找了一篇很好教程，有需要可以前往查阅：http://blog.51cto.com/jx610/1702260

**排序思想**\ ：堆排序，如果是正序，就把最大堆堆顶的最大数取出，将剩余的堆继续调整为最大堆，再次将堆顶的最大数取出，这个过程持续到剩余数只有一个时结束。如果是倒序，就把最小堆堆顶的最小数取出，将剩余的堆继续调整为最小堆，再次将堆顶的最小数取出，这个过程持续到剩余数只有一个时结束。

其实难点，在于如何在剩余堆里，找到最大数（或者最小数）。

**原理图解**\ ： |堆排序|

**代码实现**\ ：

由于这里代码较多，为了不增加理解难度，先只实现了正序。

.. code:: python

    # 建立最大堆
    def build_max_heap(arr, start, end):
        root = start
        while True:
            # 从root开始对最大堆调整
            child = 2 * root + 1
            # 避免和已排过的数再比较
            if child > end:
                break

            # 找出两个child中较大的一个
            if child + 1 <= end and arr[child] < arr[child + 1]:
                child += 1

            if arr[root] < arr[child]:
                # 最大堆小于较大的child, 交换顺序
                arr[root], arr[child] = arr[child], arr[root]

                # 正在调整的节点设置为root
                root = child
            else:
                # 无需调整的时候, 退出
                break


    def heap_sort(arr):
        # 从最后一个有子节点的节点开始，调整最大堆
        first = len(arr) // 2 - 1
        for start in range(first, -1, -1):
            build_max_heap(arr, start, len(arr) - 1)

        # 将最大的放到堆的最后一个, 堆-1, 继续调整排序
        for end in range(len(arr) -1, 0, -1):
            arr[0], arr[end] = arr[end], arr[0]
            build_max_heap(arr, 0, end - 1)
        return arr

同理，倒序也是一样，只要实现建立小堆函数即可。

.. code:: python

    def build_min_heap(arr, start, end):
        root = start
        while True:
            # 从root开始对最小堆调整
            child = 2 * root + 1
            # 避免和已排过的数再比较
            if child > end:
                break

            # 找出两个child中较小的一个
            if child + 1 <= end and arr[child] > arr[child + 1]:
                child += 1

            if arr[root] > arr[child]:
                # 最大堆小于较小的child, 交换顺序
                arr[root], arr[child] = arr[child], arr[root]

                # 正在调整的节点设置为root
                root = child
            else:
                # 无需调整的时候, 退出
                break

归并排序
--------

**时间复杂度**\ ：O(nlogn) 

**空间复杂度**\ ：O(1)

**排序思想**\ ：归并排序，是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案"修补"在一起，即分而治之)。

第一次接触到这个分治思想，是在《算法图解》这本书里，里面举的一个「分割土地」的例子非常生动形象。精髓就是，不断将问题的规模缩小化，然后逐步往上解决问题。

**原理图解**\ ： |分而治之思想|

重点其实是这个“治”的过程，如何实现将两个有序数组合并起来？思路大概是这样的。
|image4| |合并两个有序数组|

**代码实现**\ ：

.. code:: python

    # 分：分割最小化数组
    def merge_sort(seq):
        if len(seq) <= 1:
            return seq
        mid = int(len(seq) / 2)
        left = merge_sort(seq[:mid])
        right = merge_sort(seq[mid:])
        return merge(left, right)

    # 治：合并两有序数组
    def merge(left, right):
        result = []
        i, j = 0, 0
        while i < len(left) and j < len(right):
            if left[i] <= right[j]:
                result.append(left[i])
                i += 1
            else:
                result.append(right[j])
                j += 1
        result += left[i:]
        result += right[j:]
        return result

桶排序
------

**时间复杂度**\ ：O(N+N*logN-N*logM) 

**空间复杂度**\ ：O(N+M)

**排序思想**\ ：桶排序（或所谓的箱排序），工作的原理是将数组分到有限数量的桶里。下面的代码我以每个数为一个桶，比较直观。可是你要知道当数组范围比较大时，可以以一个范围为一个桶（比如1-100一个桶，102-200一个桶），然后在桶内再使用别的排序算法或者以递归方式继续使用桶排序进行排序。

桶排序是有局限性的，一般情况下，他并不能对有负数或者有小数的数组进行排序。另一方面，在无法预知数组的真实情况下，其实排序性能是非常不稳定的。比如，你可能遇到这样一个数组[1,4,5,1000000]，按照桶算法以下面的代码运行，你需要1000000个桶，非常慢，而实际上，这个数组很小，使用任意比较排序算法很快就能结果。

**原理图解**\ ：
 |桶排序|

**代码实现**:

.. code:: python

    def bucket_sort(array, reverse=False):
        _max = max(array)
        _min = min(array)
        # 桶的个数
        buckets = [0] * (_max - _min + 1)
        # 在桶里记录每个数出现的频率
        for i in array:
            buckets[i-_min] += 1

        sorted_list = []
        for index, item in enumerate(buckets):
            if item != 0:
                # 重复的数值要存储多次
                for x in range(item):
                    sorted_list.append(index+_min)
        # 正序
        if not reverse:
            return sorted_list
        # 倒序
        else:
            return sorted_list[::-1]

基数排序
--------

**时间复杂度**\ ：O(logR(B))$，B是真数（0-9），R是基数（个十百）

**空间复杂度**\ ：O(1)


**排序思想**\ ：是一种非比较型整数排序算法。其排序原理是，将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位（个位）开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,
数列就变成一个有序序列。

基数排序法会使用到桶
(Bucket)，顾名思义，通过将要比较的位（个位、十位、百位…），将要排序的元素分配至
0~9
个桶中，借以达到排序的作用，在某些时候，基数排序法的效率高于其它的比较性排序法。

基数排序的方式可以采用 LSD (Least sgnificant digital) 或 MSD (Most
sgnificant digital)，LSD 的排序方式由键值的最右边开始，而 MSD
则相反，由键值的最左边开始。

根据每位上的数值进行排序时，都会有以下两步： 
- ``分配``\ 。首先要将待排序序列中的当前位上的数字找到对应的桶； 
- ``收集``\ 。分配后需要对桶中的记录再串起来，形成一个新的排序序列，供下一次分配用。
直至遍历完成，得到排序好的序列。

如何实现正序和倒序？
顺序的区别，其实就是你\ ``收集``\ 的时候，也就是将桶的元素串起来的时候，如果你是先从小号桶串起，那就是正序，如果你是从大号桶串起，那就是倒序。

**原理图解**\ ：

这里图解下，正序的过程。 原始数组：22, 33, 43, 55, 14, 28, 65, 39, 81,
33, 100 |基数排序|

**代码实现**:

.. code:: python

    def radix_sort(array, reverse=False):
        # 最大的数有几位，决定了要几轮排序
        d = len(str(max(array)))
        for k in range(d):
            # 因为每一位数字都是0~9，故建立10个桶
            buckets=[[] for i in range(10)]
            for i in array:
                # 举例：132//10=13，13%10=3
                buckets[i//(10**k)%10].append(i)
            array=[item for items in buckets for item in items]

        if not reverse:
            return array
        return array[::-1]



.. |image0| image:: http://ovzwokrcz.bkt.clouddn.com/Fm44FD0KE9Y4RM7MF3knlGVCJba4
.. |希尔排序| image:: http://ovzwokrcz.bkt.clouddn.com/FqTP6YjNoM52fA-bA8pSPdbLgcZh
.. |堆排序| image:: http://ovzwokrcz.bkt.clouddn.com/FgRFOfPhrL0yeUuGzly5309APCnD
.. |分而治之思想| image:: http://ovzwokrcz.bkt.clouddn.com/FjQebwFfa2tDYS78_CUxy1rXmufj
.. |image4| image:: http://ovzwokrcz.bkt.clouddn.com/FjP-_a66OUAZtTpU1ytqZ66My80C
.. |合并两个有序数组| image:: http://ovzwokrcz.bkt.clouddn.com/FnCZ-3Pj39T_ELROSsGRDN31yWtY
.. |桶排序| image:: http://ovzwokrcz.bkt.clouddn.com/FljGa3F3wM_YGACETeuRHCiERXKb
.. |基数排序| image:: http://ovzwokrcz.bkt.clouddn.com/FhwWVp4LVABIMPHqNo_cpjJA9kHV

--------------

.. figure:: http://ovzwokrcz.bkt.clouddn.com/Weixin.png
   :alt: 关注公众号，获取最新文章